axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(14)
w_0 <- 2
m_0 <- 3
#number of urns
I <-100
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(123224)
w_0 <- 2
m_0 <- 3
#number of urns
I <-100
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(1234999)
w_0 <- 2
m_0 <- 3
#number of urns
I <-100
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(1234)
w_0 <- 2
m_0 <- 3
#number of urns
I <-1000
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(1234)
w_0 <- 2
m_0 <- 3
#number of urns
I <-10000
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(1234)
w_0 <- 2
m_0 <- 1
#number of urns
I <-10000
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
##Polya urns visualizations
library(tidyverse)
set.seed(1234)
w_0 <- 2
m_0 <- 1
#number of urns
I <-1000
#trials for each urn
N <- 50
paths_w_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_w_n) <- paste0("Urn", seq(1:I))
paths_m_n <- data.frame(matrix(nrow=N,ncol=I))
colnames(paths_m_n) <- paste0("Urn", seq(1:I))
paths_ratio <- matrix(nrow=N,ncol=I)
for (i in 1:I){
urn <- c(rep("w", w_0),rep("m", m_0))
w_n <- w_0
m_n <- m_0
for (n in 1:(N-1)){
if ((is.na(w_n[n]) | is.na(m_n[n]) | w_n[n] %in% 0 | m_n[n] %in% 0)) {
w_n = c(w_n, NA)
m_n = c(m_n, NA)
}
else{
urn <- c(rep("m", m_n[n]), rep("w", w_n[n]))
ball_drawn <- sample(urn, 1)
if (ball_drawn == "w"){
w_n = c(w_n, w_n[n]+1)
m_n = c(m_n, m_n[n]-1)
}
if (ball_drawn == "m"){
m_n = c(m_n, m_n[n]+1)
w_n = c(w_n, w_n[n]-1)
}
}
n = n+1
}
eval(parse(text=paste0("paths_w_n$Urn", i, "<- w_n" )))
eval(parse(text=paste0("paths_m_n$Urn", i, "<- m_n" )))
paths_ratio[1:N, i] <- paths_w_n[1:N, i]/ (paths_m_n[1:N, i] + paths_w_n[1:N, i])
}
##ratios
hist_data <- NULL
for (i in 1:I){
hist_data[i] <- paths_ratio[max.col(!is.na(t(paths_ratio)), ties.method="last")[i],i]
}
hist_data <- as.data.frame(hist_data)
colnames(hist_data) <- "Share of women after trials"
hist <- ggplot(hist_data) +
geom_density(aes(x=`Share of women after trials`))+
scale_x_continuous(limits=c(0,1), breaks=seq(0,1,by=0.1))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
) +
labs(title ="Distribution of final share of women")
prob_of_all_women = sum(hist_data$`Share of women after trials`)/nrow(hist_data)
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
detach("package:foreign", unload = TRUE)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
warnings()
pkgs <- fs::path_file(fs::dir_ls("C:/Users/laura/OneDrive/Documents/R/win-library/3.5"))
install.packages(pkgs)
install.packages(pkgs)
library(knitr)
library(brew)
gc()
shiny::runApp('C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Shiny App')
shiny::runApp("C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Shiny App")
runGitHub("Polya-Urns-Simulations","laurakcaron" )
runGitHub("Polya-Urns-Simulations","laurakcaron" )
runGitHub("Polya-Urns-Simulations","laurakcaron" )
runApp('C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Shiny App')
runApp("C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Shiny App")
library(shiny)
shiny::runUrl(https://github.com/laurakcaron/Polya-Urns-Simulations/blob/main/app.R)
shiny::runUrl("https://github.com/laurakcaron/Polya-Urns-Simulations/blob/main/app.R")
runGitHub()
runGitHub
shiny::runUrl("https://github.com/laurakcaron/Polya-Urns-Simulations/archive/master.tar.gz")
?Sys.setenv
Sys.setenv(GITHUB_PAT = "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")
library(gh)
gh("/users/laurakcaron/Polya-Urns-Simulations")
gh("/repos/laurakcaron/Polya-Urns-Simulations")
gh <- gh("/repos/laurakcaron/Polya-Urns-Simulations")
View(gh)
gh <- gh("/repos/laurakcaron/Polya-Urns-Simulations/blob/main/app.R")
gh <- GET("/repos/laurakcaron/Polya-Urns-Simulations/blob/main/app.R")
library(httr)
gh <- GET("/repos/laurakcaron/Polya-Urns-Simulations/blob/main/app.R")
gh <- GET("/repos/laurakcaron/Polya-Urns-Simulations/blob/main")
gh <- GET("https://api.github.com/repos/laurakcaron/Polya-Urns-Simulations/blob/main")
gh <- GET("https://api.github.com/repos/laurakcaron/Polya-Urns-Simulations/blob/main/app.R")
gh <- content(GET("https://api.github.com/repos/laurakcaron/Polya-Urns-Simulations/blob/main/app.R"))
gh <- content(GET("https://api.github.com/repos/laurakcaron/Polya-Urns-Simulations/git/blobs/main/app.R"))
auth <- authenticate(Sys.getenv("GITHUB_PAT"), "")
dir <- ""
file <- "app.R"
gh_account <- "laurakcaron"
repo <- "Polya-Urns-Simulations"
req_meta <-
content(
GET(
paste("https://api.github.com/repos", gh_account, repo, "contents", dir, sep="/"),
auth
)
)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
# Grab contents, using sha as a reference
req_blob <- GET(
paste("https://api.github.com/repos", gh_account, repo, "git/blobs", sha, sep="/"),
auth
)
entry <- req_meta %>% list.filter(name == file)
library(tidyverse)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
library(rlist)
library(jsonlite)
install.packages("rlist")
library(rlist)
entry <- req_meta %>% list.filter(name == file)
sha <- entry[1][[1]]$sha
req_blob <- GET(
paste("https://api.github.com/repos", gh_account, repo, "git/blobs", sha, sep="/"),
auth
)
View(req_blob)
d <- content(req_blob)$content %>%
base64_dec() %>%
rawToChar()
setwd("C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Github Repository/Polya-Urns-Simulations")
library(groundhog)
#Set folder for package installations
set.groundhog.folder(paste0(getwd(), "/Packages"))
get.groundhog.folder()
shiny::runApp()
shiny::runApp()
deployApp()
library(shiny)
library(shinythemes)
library(rsconnect)
deployApp()
runApp()
deployApp()
setwd("C:/Users/laura/OneDrive/Desktop/Laura's computer/Documents/My Own Documents/School Work/PhD RA Work/Underrepresentation Polya Urns/Github Repository/Polya-Urns-Simulations")
deployApp()
